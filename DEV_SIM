#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jun 27 08:37:35 2021

@author: asherhensley
"""

import yulesimon as ys
import matplotlib.pyplot as plt
import numpy as np
import time

# Inference Parameters
nsteps = 1000
p_thr = -1
burnin = 500
downsample = 2

# Simulate Poisson Noise Process
a_true = 0.9
b_true = 1.5
alpha_true = 1.0
y, x, lambdas = ys.PoissonNoiseProcess(N=500, seed=20, alpha=alpha_true, a=a_true, b=b_true)

# Plot Measurements
plt.figure()
plt.plot(y,'b')
#plt.semilogy(1/lambdas[x.astype('int')],'r')
plt.grid(True)
plt.ylabel('Waiting Time')
plt.xlabel('Measurement')
plt.show()

# Inference
np.random.seed(7)
Chain = ys.TimeSeries(y, sample_ab=True, a0=5.0, b0=5.0, prop_scale=0.50,
                      alpha=5, likelihood='Exponential',use_memory=True,
                      rho = 1.0, init='prior')
t0 = time.perf_counter()
history = Chain.step(nsteps)
tF = time.perf_counter()
print("Total Run Time:",(tF-t0)/60.0,"Minutes")

# Log-Likelihood
fig,ax = plt.subplots()
ax.plot(history.log_likelihood)
ax.set_xlabel('MCMC Iteration')
ax.set_ylabel('Log-Likelihood')
ax.grid(True)
fig.set_size_inches(8,4)
plt.tight_layout()
plt.show()

# Hyperparameters
fig,ax = plt.subplots(1,3)
ax[0].plot(history.alpha,label='Samples')
ax[0].plot(history.alpha*0 + alpha_true,'r',label='Truth')
ax[0].grid(True)
ax[0].set_title('alpha')
ax[0].set_xlabel('MCMC Iteration')
ax[1].plot(history.hyperparameter_a0,label='Samples')
ax[1].plot(history.hyperparameter_a0*0 + a_true,'r',label='Truth')
ax[1].grid(True)
ax[1].set_title('a')
ax[1].set_xlabel('MCMC Iteration')
ax[2].plot(history.hyperparameter_b0,label='Samples')
ax[2].plot(history.hyperparameter_b0*0 + b_true,'r',label='Truth')
ax[2].grid(True)
ax[2].set_title('b')
ax[2].set_xlabel('MCMC Iteration')
fig.set_size_inches(8,4)
plt.tight_layout()
plt.show()

# Sampled Partition Boundaries
sigma_t = 1/lambdas[x.astype('int')]
sigmaHat_t, sample_size = ys.ExpectedValue(history.std_deviation,burnin,downsample,history.pvalue>=p_thr)
fig, ax = plt.subplots(2)
ax[0].semilogy(y,'b.',label='Observations',alpha=0.25)
ax[0].semilogy(sigma_t,'r',label='True $\lambda^{-1}$',linewidth=1)
ax[0].semilogy(sigmaHat_t,'b',label='Estimated $\lambda^{-1}$',linewidth=1)
ax[0].grid(True)
ax[0].autoscale(tight=True)
ax[0].set_ylabel('Waiting Time')
ax[0].set_xlabel('Time')
ax[0].legend()
ax[1].imshow(np.transpose(history.boundaries))
ax[1].set_aspect('auto')
ax[1].set_ylabel('MCMC Sample')
ax[1].set_xticks([])
fig.set_size_inches(8,7)
plt.show()

# Total Partitions
num_states = np.max(x)
b_hat = np.sum(history.boundaries,axis=0)
samp = range(len(b_hat))
fig,ax = plt.subplots()
ax.plot(samp,b_hat,'r',label='Samples')
ax.plot(samp,b_hat*0 + num_states,'k',label='Truth')
ax.grid(True)
ax.set_xlabel('MCMC Iteration')
ax.set_ylabel('States')
fig.set_size_inches(8,4)
plt.show()



fig,ax = plt.subplots()
ax.semilogy((history.std_deviation[:,burnin::10]),'b.-',alpha=0.05,linewidth=0.5)
ax.semilogy(sigma_t,'r',linewidth=0.5)
ax.grid(True)
ax.set_xlabel('Time Sample')
ax.set_ylabel('$\lambda^{-1}$')
plt.tight_layout()
plt.show()


fig,ax = plt.subplots()
num_states = history.log_likelihood * 0
for kk in range(nsteps+1):
    num_states[kk] = len(np.unique(history.state[:,kk]))
ax.plot(num_states,'b')
ax.grid(True)
ax.set_xlabel('MCMC Sample')
ax.set_ylabel('# Valid States')
plt.show()


fig,ax = plt.subplots()
ax.plot(np.max(history.state,axis=0),'b')
ax.grid(True)
ax.set_xlabel('MCMC Sample')
ax.set_ylabel('Max State Enum')
plt.show()







